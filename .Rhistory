library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install.packages("devtools")
library(rCharts)
dataset(iris)
data(iris)
head(iris)
summary(iris)
install.packages("shiny")
library(shiny)
runExample("01_hello")
summary(iris$Species)
runApp()
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
fit <- lm(Species ~ ., data = iris)
inTrain <- createDataPartition(y = iris$Species,
p = 0.6, list = FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
inTrain <- createDataPartition(y = iris$Species,
p = 0.6, list = FALSE)
myTraining <- iris[inTrain, ]
myTesting <- iris[-inTrain, ]
library(caret)
data(iris)
set.seed(12345)
inTrain <- createDataPartition(y = iris$Species,
p = 0.6, list = FALSE)
myTraining <- iris[inTrain, ]
myTesting <- iris[-inTrain, ]
library(caret)
data(iris)
set.seed(12345)
inTrain <- createDataPartition(y = iris$Species,
p = 0.6, list = FALSE)
myTraining <- iris[inTrain, ]
myTesting <- iris[-inTrain, ]
modFit <- train(Species ~ ., method = "rf", data = myTraining)
predictions <- predict(modFit, myTesting)
confMat <- confusionMatrix(predictions, myTesting$Species)
confMat$table
accuracy <- sum((predictions == myTesting$Species))/dim(myTesting)[1]
oos_error <- 1 - accuracy
library(caret)
data(iris)
set.seed(12345)
inTrain <- createDataPartition(y = iris$Species,
p = 0.7, list = FALSE)
myTraining <- iris[inTrain, ]
myTesting <- iris[-inTrain, ]
modFit <- train(Species ~ ., method = "rf", data = myTraining)
predictions <- predict(modFit, myTesting)
confMat <- confusionMatrix(predictions, myTesting$Species)
confMat$table
accuracy <- sum((predictions == myTesting$Species))/dim(myTesting)[1]
oos_error <- 1 - accuracy
library(caret)
data(iris)
set.seed(12345)
inTrain <- createDataPartition(y = iris$Species,
p = 0.6, list = FALSE)
myTraining <- iris[inTrain, ]
myTesting <- iris[-inTrain, ]
modFit <- train(Species ~ ., method = "rf", data = myTraining)
predictions <- predict(modFit, myTesting)
confMat <- confusionMatrix(predictions, myTesting$Species)
confMat$table
accuracy <- sum((predictions == myTesting$Species))/dim(myTesting)[1]
oos_error <- 1 - accuracy
a <- c(1.5, 4.7, 7, 1)
predict(modFit, a)
df$sepal.length <- 1.5
df$a <- 1
df$a <- c(1)
df <- iris[1]
df <- iris[1,]
df <- iris[1,]
df$Species <- NA
df$Species <- []
df[1,]
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
df <- iris[1,]
df$Species <- NA
df$Sepal.Length <- input$sepal.length
df$Sepal.Width <- input$sepal.width
df$Petal.Length <- input$petal.length
df$Petal.Width <- input$petal.width
df
predict(modFit, df)
runApp("App_Shiny")
modFit
plot(modFit)
getTree(modFit)
getTree(modFit$finalModel)
library(rattle)
library(rpart.plot)
library(rpart)
fancyRpartPlot(modFit$finalModel)
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
modFit$finalModel
head(iris)
head(iris$Species = versicolor)
head(iris[10:20,])
head(iris[20:30,])
head(iris[60:70,])
tail(iris)
runApp("App_Shiny")
c <- "setosa"
paste(c, ".jpg")
paste(c, ".jpg", sep = "")
paste("example", c, ".jpg", sep = "")
paste("/www/", c, ".jpg", sep = "")
paste("./www/", c, ".jpg", sep = "")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
runApp("App_Shiny")
library(shiny)
library(caret)
data(iris)
set.seed(12345)
inTrain <- createDataPartition(y = iris$Species, p = 0.6, list = FALSE)
myTraining <- iris[inTrain, ]
modFit <- train(Species ~ ., method = "rf", data = myTraining)
save(modFit, file = "rf_model.rda")
a <- []
a <-
a <- [Sepal.Lenght = 1]
a$Sepal.Lenght <- 1
a <- NA
as.data.frame(a)
a <- as.data.frame(a)
a$Sepal.Lenght <- 1
df <- data.frame()
runApp("Iris_Predictor_App")
runApp("Iris_Predictor_App")
prediction <- data.frame()
prediction$Sepal.Length <- input$sepal.length
prediction$Sepal.Width <- input$sepal.width
prediction$Petal.Length <- input$petal.length
prediction$Petal.Width <- input$petal.width
prediction$Species <- NA
runApp("Iris_Predictor_App")
runApp("Iris_Predictor_App")
var <- c("Sepal.Length", "Sepal.Width",
"Petal.Length", "Petal.Width",
"Species")
# We create an empty data set
prediction <- data.frame(row.names = var)
View(prediction)
View(prediction)
setwd("~/RStudio WD/Iris_Predictor_App")
runApp("Iris_Predictor_App")
setwd("~/RStudio WD")
runApp("Iris_Predictor_App")
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='maxal1986',
token='6A0B30E8C6801691FDCB2CAE5555566E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='maxal1986', token='6A0B30E8C6801691FDCB2CAE5555566E', secret='cIYPf9hkC1Df+9ZZNpPLWLapr9ARIFLRlyPezhHJ')
runApp("Iris_Predictor_App")
setwd("~/RStudio WD")
runApp("Iris_Predictor_App")
library(shiny)
runApp("Iris_Predictor_App")
install.packages(c('caret', 'shiny'))
install.packages(c("caret", "shiny"))
library(shiny)
runApp()
setwd("~/RStudio WD/Iris_App")
runApp()
library(rsconnect)
deployApp()
deployApp()
deployApp()
library(shiny)
library(caret)
library(rsconnect)
setwd("~/RStudio WD/Iris_App")
runApp()
runApp()
runApp()
getwd()
accountInfo
accountInfo()
accounts
accounts()
deployApp()
deployApp()
runApp("App")
runApp("App")
version
version(knitr)
R.version
